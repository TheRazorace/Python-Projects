import time
import random
import sys

print("Αλγόριθμος Kadane --> O(n)")
print("Θα δημιουργήσουμε δύο λίστες, η μία με διπλάσιο αριθμό στοιχείων από την άλλη, με seed τον ΑΜ και τιμές στο διάστημα (-100, 100)")
print("Επιλέξτε 1 για λίστες 5000 και 10000 στοιχείων αντιστοίχως.")
print("Επιλέξτε 2 για να καθορίσετε τον αριθμό στοιχείων")

#Καθορισμός μεγέθου λίστας
e = int(input("Επιλογή:" ))
if e==1:
    num=5000
elif e==2:
    print("Επιλογή αριθμού στοιχείων. Για παράδειγμα, επιλέξτε 100 για να δημιουργήσετε δύο λίστες των 100 και των 200 στοιχείων αντιστοίχως.")
    num=int(input("Επιλογή:" ))
else:
    print("Δεν υπάρχει αυτή η επιλογή! Ξαναπροσπαθήστε...")
    sys.exit()
    

#Συνάρτηση που δημιουργεί την λίστα με seed τον ΑΜ
random.seed(1053711)
def makeArr(num, maxn):
    arr = [0]*num                              #Δημιουργώ μία κενή λίστα με το δοσμένο μέγεθος
    for i in range (num):                      #Την γεμίζω με τυχαίους αριθμούς στο δοσμένο διάστημα
        arr[i] = random.randint(-maxn, maxn)
    return arr

arr = makeArr(num,100)
double_arr = makeArr(2*num, 100)


#Συνάρτηση που υπολογίζει το μέγιστο υποάθροισμα
def kad(arr):
    n = len(arr)
    max_here = (0, 0)                                              #Μέγιστο υποάθροισμα που καταλήγει στο i
    max_so_far = (0, 0, 0)                                         #Μέγιστο υποάθροισμα από την αρχή ως το i
    for i in range (1, n+1):
        if max_here[0] + arr[i-1] > 0:                             #Έλεγχος αν η πρόσθεση με το επόμενο στοιχείο του πίνακα δίνει μεγαλύτερο αποτέλεσμα
            max_here = (max_here[0] + arr[i-1], max_here[1])       #Αν δίνει, αποθηκεύεται
        else:                                                      #Αλλιώς μηδενίζει
            max_here = (0, i)
            
        if max_here[0] > max_so_far[0]:                            #Ελέγχει αν αυτό το υποάθροισμα που μόλις υπολόγισε είναι μεγαλύτερο από αυτό που κρατείται μέχρι τώρα
            max_so_far = (max_here[0], max_here[1], i)             #Αν είναι, το αποθηκεύει
    return max_so_far

print("Γίνεται υπολογισμός...")
to = time.time()                        #Αρχή πρώτης χρονομέτρησης
m = kad(arr)                            #Υπολογισμός μέγιστου υποαθροίσματος πρώτου πίνακα
t1 = time.time()                        #Τέλος πρώτης χρονομέτρησης, αρχή δεύτερης χρονομέτρησησς                       
d = kad(double_arr)                     #Υπολογισμός μέγιστου υποαθροίσματος δεύτερου πίνακα
t2 = time.time()                        #Τέλος δεύτερης χρονομέτρησης

print("Μέγιστο υπό-άθροισμα λίστας", num,"στοιχείων:", m[0])
print("Θέση αρχής μέγιστης υπό-λίστας:", m[1],". Θέση τέλους μέγιστης υπό-λίστας:", m[2],".")
print("Χρόνος υπολογισμού:",t1 - to,'seconds')
print("Μέγιστο υπό-άθροισμα λίστας", 2*num,"στοιχείων:", d[0])
print("Θέση αρχής μέγιστης υπό-λίστας:", d[1],". Θέση τέλους μέγιστης υπό-λίστας:", d[2],".")
print("Χρόνος υπολογισμού:",t2 - t1,'seconds')
